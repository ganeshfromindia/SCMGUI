/**
 * Supply Chain Finance
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApiResponse } from '../model/apiResponse';
import { ErrorResponse } from '../model/errorResponse';
import { PurchaseOrder } from '../model/purchaseOrder';
import { UpdatePurchaseOrder } from '../model/updatePurchaseOrder';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../../variables';
import { Configuration }                                     from '../../configuration';


@Injectable()
export class PurchaseOrderService {

    protected basePath = 'http://localhost:10010';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * add a new purchase order detail
     * @param body order placed for purchasing the product
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPurchaseOrder(body: PurchaseOrder, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public createPurchaseOrder(body: PurchaseOrder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public createPurchaseOrder(body: PurchaseOrder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public createPurchaseOrder(body: PurchaseOrder, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPurchaseOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ApiResponse>(`${this.basePath}/purchaseorder`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns all purchase order details
     * @param poNumber Purchase order Number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePurchaseOrder(poNumber: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePurchaseOrder(poNumber: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePurchaseOrder(poNumber: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePurchaseOrder(poNumber: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (poNumber === null || poNumber === undefined) {
            throw new Error('Required parameter poNumber was null or undefined when calling deletePurchaseOrder.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (poNumber !== undefined) {
            queryParameters = queryParameters.set('poNumber', <any>poNumber);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/purchaseorder`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns all purchase order details
     * @param poNumber Purchase order Number
     * @param sortBy sort by query
     * @param searchBy search by query
     * @param page pagination query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPurchaseOrder(poNumber?: number, sortBy?: string, searchBy?: string, page?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<PurchaseOrder>>;
    public getPurchaseOrder(poNumber?: number, sortBy?: string, searchBy?: string, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PurchaseOrder>>>;
    public getPurchaseOrder(poNumber?: number, sortBy?: string, searchBy?: string, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PurchaseOrder>>>;
    public getPurchaseOrder(poNumber?: number, sortBy?: string, searchBy?: string, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (poNumber !== undefined) {
            queryParameters = queryParameters.set('poNumber', <any>poNumber);
        }
        if (sortBy !== undefined) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (searchBy !== undefined) {
            queryParameters = queryParameters.set('searchBy', <any>searchBy);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<PurchaseOrder>>(`${this.basePath}/purchaseorder`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Update Purchase order details
     * @param body update purchase order details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePurchaseOrder(body: UpdatePurchaseOrder, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public updatePurchaseOrder(body: UpdatePurchaseOrder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public updatePurchaseOrder(body: UpdatePurchaseOrder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public updatePurchaseOrder(body: UpdatePurchaseOrder, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updatePurchaseOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<ApiResponse>(`${this.basePath}/purchaseorder`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Update single entity of Purchase Order
     * @param body Update single entry
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSinglePurchaseOrder(body: UpdatePurchaseOrder, observe?: 'body', reportProgress?: boolean): Observable<ApiResponse>;
    public updateSinglePurchaseOrder(body: UpdatePurchaseOrder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiResponse>>;
    public updateSinglePurchaseOrder(body: UpdatePurchaseOrder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiResponse>>;
    public updateSinglePurchaseOrder(body: UpdatePurchaseOrder, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateSinglePurchaseOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.patch<ApiResponse>(`${this.basePath}/purchaseorder`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
